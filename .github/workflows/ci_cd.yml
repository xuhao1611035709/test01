name: SpringBoot Function CI/CD Pipeline

# 触发条件：main分支的推送事件
on:
  push:
    branches: [ main ]
  workflow_dispatch:  # 允许手动触发工作流

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    name: Build and Deploy SpringBoot Function

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # 获取完整历史以便于版本管理

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'  # 使用Eclipse Temurin发行版
          cache: 'maven'  # 启用Maven缓存提升构建速度

      - name: Build with Maven
        run: mvn -B clean package --file pom.xml

      - name: Upload build artifact
        uses: actions/upload-artifact@v3
        with:
          name: function-jar
          path: target/*.jar
          retention-days: 5

      - name: Install Aliyun CLI
        run: |
          curl -s https://raw.githubusercontent.com/aliyun/aliyun-cli/master/install.sh | sudo bash
          aliyun version
          echo "Aliyun CLI installation completed"

      - name: Configure Aliyun CLI
        env:
          ALIYUN_REGION: ${{ secrets.ALIYUN_REGION }}
          ACCESS_KEY_ID: ${{ secrets.ALIBABA_CLOUD_ACCESS_KEY_ID }}
          ACCESS_KEY_SECRET: ${{ secrets.ALIBABA_CLOUD_ACCESS_KEY_SECRET }}
        run: |
          mkdir -p ~/.aliyun
          aliyun configure set \
            --profile default \
            --mode AK \
            --region "${ALIYUN_REGION}" \
            --access-key-id "${ACCESS_KEY_ID}" \
            --access-key-secret "${ACCESS_KEY_SECRET}"
          echo "Aliyun CLI configured successfully"

      - name: Get JAR file name
        id: get-jar
        run: |
          JAR_FILE=$(find ./target -name "*.jar" -type f | head -n 1)
          JAR_NAME=$(basename "$JAR_FILE")
          echo "JAR_FILE=$JAR_FILE" >> $GITHUB_OUTPUT
          echo "JAR_NAME=$JAR_NAME" >> $GITHUB_OUTPUT
          echo "Found JAR: $JAR_NAME"

      - name: Upload JAR to OSS
        env:
          ALIYUN_REGION: ${{ secrets.ALIYUN_REGION }}
          OSS_BUCKET: ci-cd-test
        run: |
          echo "Uploading JAR to OSS bucket: $OSS_BUCKET"
          aliyun oss cp ${{ steps.get-jar.outputs.JAR_FILE }} oss://$OSS_BUCKET/${{ steps.get-jar.outputs.JAR_NAME }} --region "${ALIYUN_REGION}"
          echo "Upload completed successfully"

      - name: Update Function Configuration
        env:
          ALIYUN_REGION: ${{ secrets.ALIYUN_REGION }}
          OSS_BUCKET: ci-cd-test
          FUNCTION_NAME: ci_cd_test
        run: |
          echo "Updating function: $FUNCTION_NAME"
          DEPLOYMENT_TIME=$(date '+%Y-%m-%d %H:%M:%S')
          
          # 使用更详细的函数配置
          aliyun fc PUT /2023-03-30/functions/${FUNCTION_NAME} \
            --region "${ALIYUN_REGION}" \
            --header "Content-Type=application/json" \
            --body "{
              \"code\": {
                \"ossBucketName\": \"${OSS_BUCKET}\",
                \"ossObjectName\": \"${{ steps.get-jar.outputs.JAR_NAME }}\"
              },
              \"description\": \"Updated via CI/CD pipeline on ${DEPLOYMENT_TIME}\",
              \"environmentVariables\": {
                \"DEPLOY_ENV\": \"production\",
                \"DEPLOY_TIME\": \"${DEPLOYMENT_TIME}\"
              }
            }"
          echo "Function update completed"

      - name: Verify deployment
        env:
          ALIYUN_REGION: ${{ secrets.ALIYUN_REGION }}
          FUNCTION_NAME: ci_cd_test
        run: |
          echo "Verifying function deployment..."
          # 检索函数详细信息并验证部署
          FUNCTION_INFO=$(aliyun fc GET /2023-03-30/functions/${FUNCTION_NAME} --region "${ALIYUN_REGION}")
          echo "Function info retrieved successfully"
          echo "Deployment verification completed"
          
          # 输出函数基本信息
          echo $FUNCTION_INFO | grep -E '"functionName"|"lastModifiedTime"|"description"'



#name: CI/CD for Alibaba Cloud Function
#
#on:
#  push:
#    branches:
#      - main
#
#jobs:
#  build:
#    runs-on: ubuntu-latest
#
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v2
#
#      - name: Set up JDK
#        uses: actions/setup-java@v1
#        with:
#          java-version: '17'
#
#      - name: Build with Maven
#        run: mvn clean package
#
#      - name: Install Aliyun CLI
#        run: |
#          curl -s https://raw.githubusercontent.com/aliyun/aliyun-cli/master/install.sh | sudo bash
#          aliyun version
#
#      - name: Configure Aliyun CLI
#        run: |
#          mkdir -p ~/.aliyun
#          aliyun configure set \
#            --profile default \
#            --mode AK \
#            --region "${{ secrets.ALIYUN_REGION }}" \
#            --access-key-id "${{ secrets.ALIBABA_CLOUD_ACCESS_KEY_ID }}" \
#            --access-key-secret "${{ secrets.ALIBABA_CLOUD_ACCESS_KEY_SECRET }}"
#
#      - name: Upload JAR to OSS
#        run: |
#          aliyun oss cp ./target/books-v1.0.jar oss://ci-cd-test/books-v1.0.jar --region "${{ secrets.ALIYUN_REGION }}"
#
#      - name: List FC Functions
#        run: |
#          echo "===== Listing all functions ====="
#          aliyun fc GET /2023-03-30/functions --region "${{ secrets.ALIYUN_REGION }}"
#          echo "===== End of functions list ====="
#
#      - name: Update Alibaba Cloud Function
#        run: |
#          aliyun fc PUT /2023-03-30/functions/ci_cd_test \
#            --region "${{ secrets.ALIYUN_REGION }}" \
#            --header "Content-Type=application/json" \
#            --body "{\"code\":{\"ossBucketName\":\"ci-cd-test\",\"ossObjectName\":\"books-v1.0.jar\"}}"
