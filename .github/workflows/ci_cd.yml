name: CI/CD for Alibaba Cloud Function

on:
  push:
    branches:
      - main
      - dev
      - release

jobs:
  build:
    runs-on: ubuntu-latest
    environment: ${{ github.ref == 'refs/heads/main' && 'prod' || github.ref == 'refs/heads/dev' && 'dev' || 'release' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Run tests
        run: mvn test

      - name: Generate test report
        run: mvn surefire-report:report
        if: always()

      - name: Upload test report
        uses: actions/upload-artifact@v4
        with:
          name: test-report-${{ vars.ENVIRONMENT }}
          path: target/site
        if: always()

      - name: Run tests with coverage
        run: mvn test jacoco:report

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report-${{ vars.ENVIRONMENT }}
          path: target/site/jacoco
        if: always()

      - name: Build with Maven
        run: mvn clean package

      - name: Install Aliyun CLI
        run: |
          curl -s https://raw.githubusercontent.com/aliyun/aliyun-cli/master/install.sh | sudo bash
          aliyun version

      - name: Configure Aliyun CLI
        run: |
          mkdir -p ~/.aliyun
          aliyun configure set \
            --profile default \
            --mode AK \
            --region "${{ secrets.ALIYUN_REGION }}" \
            --access-key-id "${{ secrets.ALIBABA_CLOUD_ACCESS_KEY_ID }}" \
            --access-key-secret "${{ secrets.ALIBABA_CLOUD_ACCESS_KEY_SECRET }}"

      - name: Create properly formatted bootstrap file
        run: |
          # 创建Unix格式的bootstrap文件
          echo '#!/bin/sh' > bootstrap
          echo 'java -jar /code/books-v1.0.jar' >> bootstrap

          # 安装dos2unix并确保使用LF换行符（Unix格式）
          sudo apt-get update && sudo apt-get install -y dos2unix
          dos2unix bootstrap

          # 添加执行权限
          chmod +x bootstrap

          # 验证文件格式（调试信息）
          echo "Bootstrap file content with format markers:"
          cat -A bootstrap
          echo "File permissions:"
          ls -la bootstrap
          echo "File type:"
          file bootstrap

      - name: Create deployment package
        run: |
          # 创建临时目录结构
          mkdir -p deployment/code
          
          # 复制JAR和bootstrap到正确结构
          cp ./target/books-v1.0.jar deployment/code/
          cp ./bootstrap deployment/
          
          # 进入目录并创建ZIP包
          cd deployment
          zip -r ../function-deploy.zip .
          
          # 验证ZIP内容
          cd ..
          echo "ZIP package content:"
          unzip -l function-deploy.zip

      - name: Upload ZIP package to OSS
        run: |
          echo "Uploading to environment: ${{ vars.ENVIRONMENT }}"
          
          # 获取OSS路径的目录部分用于列出验证
          OSS_DIR=$(dirname "${{ vars.OSS_PATH }}")
          
          # 上传ZIP文件
          aliyun oss cp ./function-deploy.zip oss://ci-cd-test/${{ vars.OSS_PATH }}.zip --region "${{ secrets.ALIYUN_REGION }}" --force
          
          # 验证上传
          echo "Files in OSS bucket:"
          aliyun oss ls oss://ci-cd-test/${OSS_DIR}/ --region "${{ secrets.ALIYUN_REGION }}"

      - name: List FC Functions
        run: |
          echo "===== Listing all functions ====="
          aliyun fc GET /2023-03-30/functions --region "${{ secrets.ALIYUN_REGION }}"
          echo "===== End of functions list ====="

      - name: Update Alibaba Cloud Function
        run: |
          aliyun fc PUT /2023-03-30/functions/${{ vars.FUNCTION_NAME }} \
            --body '{
              "code": {
                "ossBucketName": "ci-cd-test",
                "ossObjectName": "${{ vars.OSS_PATH }}.zip"
              }
            }' \
            --header "Content-Type=application/json" \
            --region "${{ secrets.ALIYUN_REGION }}"
          
          echo "Function update triggered - ${{ vars.FUNCTION_NAME }}"
